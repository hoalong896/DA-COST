import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import jwt from "jsonwebtoken";

const prisma = new PrismaClient();

// ‚úÖ H√†m verify JWT
function verifyJwt(token) {
  try {
    return jwt.verify(token, process.env.JWT_SECRET || "mysecret");
  } catch (err) {
    return null;
  }
}

export async function GET(req) {
  try {
    // ‚úÖ L·∫•y token t·ª´ header
    const authHeader = req.headers.get("authorization");
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return NextResponse.json({ message: "Ch∆∞a ƒëƒÉng nh·∫≠p" }, { status: 401 });
    }

    const token = authHeader.split(" ")[1];
    const payload = verifyJwt(token);

    if (!payload) {
      return NextResponse.json(
        { message: "Token kh√¥ng h·ª£p l·ªá" },
        { status: 403 }
      );
    }

    const userId = payload.userId; // üëà userId t·ª´ token

    // ‚úÖ T√¨m gi·ªè h√†ng c·ªßa user
    let cart = await prisma.gio_hang.findFirst({
      where: { ma_nguoi_mua: userId },
      include: {
        chi_tiet_gio_hang: {
          include: {
            san_pham: {
              include: { san_pham_anh: true },
            },
          },
        },
      },
    });

    // ‚úÖ N·∫øu ch∆∞a c√≥ th√¨ t·∫°o gi·ªè h√†ng tr·ªëng
    if (!cart) {
      cart = await prisma.gio_hang.create({
        data: { ma_nguoi_mua: userId },
        include: {
          chi_tiet_gio_hang: {
            include: {
              san_pham: {
                include: { san_pham_anh: true },
              },
            },
          },
        },
      });
    }

    return NextResponse.json(cart, { status: 200 });
  } catch (err) {
    console.error("‚ùå L·ªói GET gi·ªè h√†ng:", err);
    return NextResponse.json(
      { message: err.message || "Kh√¥ng th·ªÉ l·∫•y gi·ªè h√†ng" },
      { status: 500 }
    );
  }
}
